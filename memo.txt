*레이아웃은 '여백'을 생각한다. 레이아웃이 안먹히면, 여백을 살펴본다

*margin:auto를 하면 남은 여백을 모두 갖는다. flex-grow의 대체제가 될 수 있다

*한꺼번에 만들 수 없다. 작게 나눠서 만든다.

*article은 본문이 있어야한다.

*공통스타일을 모르면, 공통 스타일을 미리 만들지 말라. 겹친다.

*개별요소를 하나씩 만들고 개별요소들을 배치해야한다. 요소를 만드는 것과 배치를 함께 하면 복잡해진다.

*디자인과 레이아웃은 분리한다.

*많이쓰이는 건 변수로 쓰지만, 특수하게 쓰이는 건 변수로 처리하지 않는다.

*화면을 보면 떠올려야 하는 것.
1.제목이있는가? -> 있으면 section 제목을 부여하는 건 임의적인데
제목을 붙이려고 하는 '그것'에 이름을 부여할 수 있으면 제목을 붙일 수 있는거다.
2.여러개의 섹션이 있으면 div로 묶을 수 있는지 판단한다.

*알맹이부터 만들고 껍데기로 간다.

*css기본 구분자는 '-'로 지정한다. 단 구분된 단어 사이의 단어가 또다시 구분되면 '_'를 사용한다.

*요즘 reset.css에 a태그의 속성을 지운다. 그 이유는 a태그에 붙은 lable을 눌러도 전송되기 때문이다.

<2023.09.25>
*inline 형태는 박스를 갖지않아 여백을 통해 정렬을 할 수 없다. 
*작업은 모바일부터한다.
*상황에 따라 화면이 다르다고 절대 두개의 HTML을 만들지 않는다.

<2023.09.27>
1.셀렉터의 깊이가 깊어지면, 레이아웃 까지만 셀렉터로 지정하고 디자인은 Util로 덧칠한다.
두 개의 깊이 이상 내려가지 않는다.

.menu-card
    .like-block 
        span {

        }

위와 같이 작성하지 않는다. span을 지우고 span에 해당하는 스타일은 Util로 덧칠한다.

2.미디어 쿼리의 영향에 따라 존재 여부가 바뀌는 요소는 변수로 하나 더 추가한다.

<section class="menu-card md:menu-card">

미디어쿼리를 적용해 700px 이상에서 카드의 바탕이 파란색으로 바뀌길 원한다.
그래서 'md:menu-card' 변수를 하나 더 만들어 화면이 700px 때 파란색으로 변하는 속성을 하나 더 만든다.

